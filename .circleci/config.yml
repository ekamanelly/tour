version: 2.1
executors:
  node-image:
    docker:
      - image: cimg/node:13.8.0

  aws-cli-image:
    docker:
      - image: amazon/aws-cli

  ansible-image:
    docker:
      - image: python:3.7-alpine3.11

commands:
  empty-bucket:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: empty bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when:
            on_fail
            # aws s3 rb "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --force
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  install_aws_cli:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
          when: on_fail

  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Your Memstash or kvdb.io GET URL code goes here
            SUCCESS=$(curl --insecure  https://kvdb.io/A5TFMALrhCcaW2aKmV7FtK/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi
jobs:
  test-backend:
    executor: node-image
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Build front-end
          command: |
            cd backend
            npm install
            npm run test:coverage
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend
     

workflows:
  default:
    jobs:
      - test-backend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

version: 2.1
executors:
  node-image:
    docker:
      - image: cimg/node:13.8.0

  aws-cli-image:
    docker:
      - image: amazon/aws-cli

  ansible-image:
    docker:
      - image: python:3.7-alpine3.11

commands:
  empty-bucket:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: empty bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when:
            on_fail
            # aws s3 rb "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --force
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  install_aws_cli:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
          when: on_fail

  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Your Memstash or kvdb.io GET URL code goes here
            SUCCESS=$(curl --insecure  https://kvdb.io/A5TFMALrhCcaW2aKmV7FtK/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi
jobs:
  test-backend:
    executor: node-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-frontend:
    executor: node-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    executor: node-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build front-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: frontend-build
  test-frontend:
    executor: node-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  test-backende:
    executor: node-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  scan-frontend:
    executor: node-image
    steps:
      - checkout
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install 
            npm audit fix          
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    executor: node-image
    steps:
      - checkout
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix           
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    executor: aws-cli-image
    steps:
      - checkout
      - run: yum install -y tar gzip jq
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
      - run: 
          name: display ip
          command: | 
              cat .circleci/ansible/inventory.txt 
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt      
      - destroy-environment

  configure-infrastructure:
    executor: ansible-image
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["51:71:8b:a0:32:d4:5e:7b:3b:f7:80:45:e0:70:13:e1"]
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            pwd
            ls -al
            cat .circleci/ansible/inventory.txt
            apk add --update ansible
            apk add openssh
            apk add python3
            apk add curl
            apk add unzip
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml -vvv
      - install_aws_cli
      - destroy-environment

  run-migrations:
    executor: node-image
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl  -k https://kvdb.io/A5TFMALrhCcaW2aKmV7FtK/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  deploy-frontend:
    executor: ansible-image
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm tar gzip jq curl
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            export API_URL="http://${BACKEND_IP}:3030"

            echo "API_URL = ${API_URL}"
            echo API_URL="${API_URL}" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - empty-bucket
      - destroy-environment

  deploy-backend:
    executor: ansible-image
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["51:71:8b:a0:32:d4:5e:7b:3b:f7:80:45:e0:70:13:e1"]
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm openssh tar gzip
      - run:
          name: Deploy backend
          command: |
            ls -al
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -vvv
      - empty-bucket
      - destroy-environment
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  smoke-test:
    executor: aws-cli-image
    steps:
      # Checkout code from git
      - checkout
      - run:
          command: yum install -y curl  
      - run: 
          name: make sure the instance is stable 
          command: sleep 90        
      - run:
          name:
            Backend smoke test.
            # Fetch and prepare the BACKEND_IP env var
          command: |
            export backend_ip=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${backend_ip}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name:
            Frontend smoke test.
            # Change this to 0 after the job fails
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi
      - destroy-environment
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    executor: aws-cli-image
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Get old workflow ID
          command: |
            aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" \
            --no-paginate --output text >> .circleci/prvJob.txt
            cat .circleci/prvJob.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/prvJob.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople 
      - empty-bucket
      - destroy-environment
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}              

  cleanup:
    executor: aws-cli-image
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies...
          command: yum install -y tar gzip
      - attach_workspace:
          at: ~/   
      - run:
          name: Get old stack workflow id
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"          
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(cat .circleci/prvJob.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
      - run:
          name: remove old needless stacks
          command: |
            export OldWorkflowID=$(cat .circleci/prvJob.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" 
      - empty-bucket
      - destroy-environment
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}        

workflows:
  default:
    jobs:
      - test-backend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
